{
  "openapi": "3.0.3",
  "info": {
    "title": "RCRT API",
    "version": "0.1.0",
    "description": "Right Context Right Time (RCRT) service. Provides minimal context packets (breadcrumbs), subscriptions, event fanout (NATS/SSE/webhooks), ACL/RLS, vector search, and secrets handling. Unless otherwise stated, endpoints require agent JWT (or dev AUTH_MODE=disabled)."
  },
  "servers": [{ "url": "/" }],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health",
        "description": "Liveness/readiness probe. Returns 'ok' when the API is serving requests.",
        "responses": { "200": { "description": "ok", "content": { "text/plain": { "schema": { "type": "string" } } } } },
        "security": []
      }
    },
    "/metrics": {
      "get": {
        "summary": "Prometheus metrics",
        "description": "Prometheus-compatible metrics endpoint.",
        "responses": { "200": { "description": "Metrics", "content": { "text/plain": { "schema": { "type": "string" } } } } },
        "security": []
      }
    },
    "/breadcrumbs": {
      "post": {
        "summary": "Create breadcrumb",
        "description": "Create a minimal, persistent breadcrumb. Emits events to matching subscribers. Requires role: emitter or curator. If supplied, Idempotency-Key deduplicates identical requests.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BreadcrumbCreate" } } } },
        "parameters": [{ "name": "Idempotency-Key", "in": "header", "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateResp" } } } }, "409": { "description": "Conflict (duplicate Idempotency-Key)" } }
      },
      "get": {
        "summary": "List breadcrumbs",
        "description": "List breadcrumbs visible to the caller within the owner scope. Optional tag filter.",
        "parameters": [{ "name": "tag", "in": "query", "schema": { "type": "string" } }],
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ListItem" } } } } } }
      }
    },
    "/breadcrumbs/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/BreadcrumbId" }],
      "get": {
        "summary": "Get breadcrumb context",
        "description": "Fetch minimal context-view (redacted) of a breadcrumb for LLM usage. Access controlled by visibility/ACL.",
        "responses": { "200": { "description": "Context", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BreadcrumbContext" } } } }, "404": { "description": "Not found" } }
      },
      "patch": {
        "summary": "Update breadcrumb",
        "description": "Partial update of breadcrumb fields. Include If-Match header with current version (e.g., \"5\") to ensure optimistic concurrency. Appends an entry to history and emits events.",
        "parameters": [{ "$ref": "#/components/parameters/IfMatch" }],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BreadcrumbUpdate" } } } },
        "responses": { "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } }, "412": { "description": "Version mismatch" } }
      },
      "delete": {
        "summary": "Delete breadcrumb",
        "description": "Hard-delete the breadcrumb (soft-delete optional in future). Emits no further events.",
        "responses": { "200": { "description": "Deleted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } }, "404": { "description": "Not found" } }
      }
    },
    "/breadcrumbs/{id}/full": {
      "parameters": [{ "$ref": "#/components/parameters/BreadcrumbId" }],
      "get": {
        "summary": "Get full breadcrumb",
        "description": "Fetch full-view of a breadcrumb including operational metadata. Requires ACL 'read_full' or curator role.",
        "responses": { "200": { "description": "Full", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BreadcrumbFull" } } } }, "403": { "description": "Forbidden" }, "404": { "description": "Not found" } }
      }
    },
    "/breadcrumbs/{id}/history": {
      "parameters": [{ "$ref": "#/components/parameters/BreadcrumbId" }],
      "get": {
        "summary": "Get history",
        "description": "List historical versions with context snapshots and audit details.",
        "responses": { "200": { "description": "History", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/HistoryItem" } } } } } }
      }
    },
    "/breadcrumbs/search": {
      "get": {
        "summary": "Vector search",
        "description": "Nearest-neighbor search over embeddings (auto-embed with 'q' or pass explicit 'qvec'). Filterable by tag.",
        "parameters": [{ "name": "q", "in": "query", "schema": { "type": "string" } }, { "name": "qvec", "in": "query", "schema": { "type": "string" } }, { "name": "nn", "in": "query", "schema": { "type": "integer" } }, { "name": "tag", "in": "query", "schema": { "type": "string" } }],
        "responses": { "200": { "description": "Results", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ListItem" } } } } } }
      }
    },
    "/subscriptions/selectors": {
      "post": {
        "summary": "Create selector",
        "description": "Create a selector subscription for the caller agent. Supports tag filters, optional schema name, and simple context_match rules (eq, contains_any). Requires role: subscriber or curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Selector" } } } },
        "responses": { "200": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SelectorSubscription" } } } } }
      },
      "get": {
        "summary": "List selectors",
        "description": "List selector subscriptions owned by the caller agent.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/SelectorSubscription" } } } } } }
      }
    },
    "/subscriptions/selectors/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/SelectorId" }],
      "put": {
        "summary": "Update selector",
        "description": "Update an existing selector subscription. Requires role: subscriber or curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Selector" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      },
      "delete": {
        "summary": "Delete selector",
        "description": "Delete a selector subscription. Requires role: subscriber or curator.",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/events/stream": {
      "get": {
        "summary": "SSE stream",
        "description": "Server-Sent Events stream of authorized events (owner-filtered and per-agent). Includes periodic ping events for liveness.",
        "responses": { "200": { "description": "SSE", "content": { "text/event-stream": {} } } }
      }
    },
    "/acl": {
      "get": {
        "summary": "List ACL entries",
        "description": "List ACL grants for the current owner. Requires curator in many cases.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AclItem" } } } } } }
      }
    },
    "/acl/grant": {
      "post": {
        "summary": "Grant ACL",
        "description": "Grant an action on a breadcrumb to an agent. Requires curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AclGrantAgent" } } } },
        "responses": { "200": { "description": "Granted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdResp" } } } } }
      }
    },
    "/acl/revoke": {
      "post": {
        "summary": "Revoke ACL",
        "description": "Revoke an action on a breadcrumb for an agent. Requires curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AclGrantAgent" } } } },
        "responses": { "200": { "description": "Revoked", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RowsResp" } } } } }
      }
    },
    "/agents": {
      "get": {
        "summary": "List agents",
        "description": "List agents in the current owner scope.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AgentItem" } } } } } }
      }
    },
    "/agents/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/AgentId" }],
      "post": {
        "summary": "Register agent",
        "description": "Upsert agent metadata and roles within the tenant. Caller must be the agent or curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentRegReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      },
      "get": {
        "summary": "Get agent",
        "description": "Fetch an agent by ID.",
        "responses": { "200": { "description": "Agent", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentItem" } } } }, "404": { "description": "Not found" } }
      },
      "delete": {
        "summary": "Delete agent",
        "description": "Delete an agent (curator only).",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/agents/{id}/secret": {
      "parameters": [{ "$ref": "#/components/parameters/AgentId" }],
      "post": {
        "summary": "Set webhook secret",
        "description": "Set or update agent webhook HMAC secret used to sign deliveries.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/agents/run": {
      "post": {
        "summary": "Run multi-agent orchestration",
        "description": "Trigger an agent pipeline. Requires curator or emitter.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentRunInput" } } } },
        "responses": { "200": { "description": "Result", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentRunOutput" } } } } }
      }
    },
    "/agents/{id}/webhooks": {
      "parameters": [{ "$ref": "#/components/parameters/AgentId" }],
      "post": {
        "summary": "Register webhook",
        "description": "Register or reactivate a webhook for an agent (deduped by URL).",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdResp" } } } } }
      },
      "get": {
        "summary": "List webhooks",
        "description": "List active webhooks for an agent.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookItem" } } } } } }
      }
    },
    "/agents/{id}/webhooks/{wid}": {
      "parameters": [{ "$ref": "#/components/parameters/AgentId" }, { "$ref": "#/components/parameters/WebhookId" }],
      "delete": {
        "summary": "Deactivate webhook",
        "description": "Deactivate (soft-delete) a webhook by ID.",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/tenants": {
      "get": {
        "summary": "List tenants",
        "description": "Curator-only: list all tenants.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TenantItem" } } } } } }
      }
    },
    "/tenants/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/TenantId" }],
      "post": {
        "summary": "Ensure tenant",
        "description": "Idempotent creation/update of a tenant row (for dev/local bootstrapping).",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      },
      "get": {
        "summary": "Get tenant",
        "description": "Fetch a tenant by ID.",
        "responses": { "200": { "description": "Tenant", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantItem" } } } }, "404": { "description": "Not found" } }
      },
      "put": {
        "summary": "Update tenant",
        "description": "Update tenant name. Caller must match owner or be curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      },
      "delete": {
        "summary": "Delete tenant",
        "description": "Curator-only: delete a tenant.",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/secrets": {
      "post": {
        "summary": "Create secret",
        "description": "Create an envelope-encrypted secret using a local KEK (DEK per-secret; AES-GCM for value, XChaCha20-Poly1305 for DEK wrap). Requires curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretCreateReq" } } } },
        "responses": { "200": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdResp" } } } } }
      },
      "get": {
        "summary": "List secrets",
        "description": "List secrets for the current owner, optionally filtered by scope.",
        "parameters": [
          { "name": "scope_type", "in": "query", "schema": { "type": "string" } },
          { "name": "scope_id", "in": "query", "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/SecretListItem" } } } } } }
      }
    },
    "/secrets/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/SecretId" }],
      "put": {
        "summary": "Update secret value",
        "description": "Update the plaintext value of a secret. Requires curator.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretUpdateReq" } } } },
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      },
      "delete": {
        "summary": "Delete secret",
        "description": "Delete a secret. Requires curator.",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/secrets/{id}/decrypt": {
      "parameters": [{ "$ref": "#/components/parameters/SecretId" }],
      "post": {
        "summary": "Decrypt secret",
        "description": "Decrypt and return the plaintext secret; audited with agent_id and reason.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretDecryptReq" } } } },
        "responses": { "200": { "description": "Decrypted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretValue" } } } } }
      }
    },
    "/admin/purge": {
      "post": {
        "summary": "Purge expired TTL",
        "description": "Curator-only: delete all expired TTL breadcrumbs for current owner.",
        "responses": { "200": { "description": "Purged", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PurgeResp" } } } } }
      }
    },
    "/dlq": {
      "get": {
        "summary": "List webhook DLQ",
        "description": "Curator-only: list failed webhook deliveries queued for manual retry.",
        "responses": { "200": { "description": "List", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/DlqItem" } } } } } }
      }
    },
    "/dlq/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/DlqId" }],
      "delete": {
        "summary": "Delete DLQ item",
        "description": "Curator-only: delete a single DLQ webhook delivery.",
        "responses": { "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/dlq/{id}/retry": {
      "parameters": [{ "$ref": "#/components/parameters/DlqId" }],
      "post": {
        "summary": "Retry DLQ item",
        "description": "Curator-only: requeue a single DLQ webhook delivery and remove it from DLQ.",
        "responses": { "200": { "description": "Requeued", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResp" } } } } }
      }
    },
    "/auth/token": {
      "post": {
        "summary": "Generate JWT token",
        "description": "Generate a JWT token for authentication with specified owner_id, agent_id, and roles.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenRequest" } } } },
        "responses": { "200": { "description": "Token generated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenResponse" } } } } },
        "security": []
      }
    },
    "/hygiene/stats": {
      "get": {
        "summary": "Get hygiene statistics",
        "description": "Curator-only: get automatic hygiene system statistics and status.",
        "responses": { "200": { "description": "Stats", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HygieneStats" } } } } }
      }
    },
    "/hygiene/run": {
      "post": {
        "summary": "Trigger manual hygiene cleanup",
        "description": "Curator-only: trigger manual hygiene cleanup of expired breadcrumbs and health checks.",
        "responses": { "200": { "description": "Cleanup completed", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HygieneRunResult" } } } } }
      }
    }
  },
  "components": {
    "parameters": {
      "BreadcrumbId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "AgentId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "WebhookId": { "name": "wid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "TenantId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "SecretId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "DlqId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
      "IfMatch": { "name": "If-Match", "in": "header", "schema": { "type": "string" } },
      "SelectorId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
    },
    "schemas": {
      "OkResp": { "type": "object", "properties": { "ok": { "type": "boolean" } } },
      "IdResp": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" } } },
      "CreateResp": { "$ref": "#/components/schemas/IdResp" },
      "PurgeResp": { "type": "object", "properties": { "purged": { "type": "integer" } } },
      "ListItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "title": { "type": "string" }, "tags": { "type": "array", "items": { "type": "string" } }, "version": { "type": "integer" }, "updated_at": { "type": "string", "format": "date-time" } } },
      "BreadcrumbCreate": { "type": "object", "required": ["title","context","tags"], "properties": { "title": { "type": "string" }, "context": { "type": "object", "additionalProperties": true }, "tags": { "type": "array", "items": { "type": "string" } }, "schema_name": { "type": "string" }, "visibility": { "type": "string", "enum": ["public","team","private"] }, "sensitivity": { "type": "string", "enum": ["low","pii","secret"] }, "ttl": { "type": "string", "format": "date-time" } } },
      "BreadcrumbUpdate": { "type": "object", "properties": { "title": { "type": "string" }, "context": { "type": "object", "additionalProperties": true }, "tags": { "type": "array", "items": { "type": "string" } }, "schema_name": { "type": "string" }, "visibility": { "type": "string", "enum": ["public","team","private"] }, "sensitivity": { "type": "string", "enum": ["low","pii","secret"] }, "ttl": { "type": "string", "format": "date-time" } } },
      "BreadcrumbContext": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "title": { "type": "string" }, "context": { "type": "object", "additionalProperties": true }, "tags": { "type": "array", "items": { "type": "string" } }, "version": { "type": "integer" }, "updated_at": { "type": "string", "format": "date-time" } } },
      "BreadcrumbFull": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "owner_id": { "type": "string", "format": "uuid" }, "title": { "type": "string" }, "context": { "type": "object", "additionalProperties": true }, "tags": { "type": "array", "items": { "type": "string" } }, "schema_name": { "type": "string" }, "visibility": { "type": "string" }, "sensitivity": { "type": "string" }, "version": { "type": "integer" }, "checksum": { "type": "string" }, "ttl": { "type": "string", "format": "date-time" }, "created_at": { "type": "string", "format": "date-time" }, "updated_at": { "type": "string", "format": "date-time" }, "created_by": { "type": "string", "format": "uuid" }, "updated_by": { "type": "string", "format": "uuid" }, "size_bytes": { "type": "integer" }, "embedding": { "type": "array", "items": { "type": "number" } } } },
      "Selector": { "type": "object", "properties": { "any_tags": { "type": "array", "items": { "type": "string" } }, "all_tags": { "type": "array", "items": { "type": "string" } }, "schema_name": { "type": "string" }, "context_match": { "type": "array", "items": { "$ref": "#/components/schemas/ContextMatch" } } } },
      "ContextMatch": { "type": "object", "properties": { "path": { "type": "string" }, "op": { "type": "string", "enum": ["eq","contains_any","gt","lt"] }, "value": { } }, "required": ["path","op","value"] },
      "SelectorSubscription": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "owner_id": { "type": "string", "format": "uuid" }, "agent_id": { "type": "string", "format": "uuid" }, "selector": { "$ref": "#/components/schemas/Selector" } } },
      "WebhookReq": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } }, "required": ["url"] },
      "WebhookItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "url": { "type": "string", "format": "uri" } } },
      "AgentRegReq": { "type": "object", "properties": { "roles": { "type": "array", "items": { "type": "string" } } }, "required": ["roles"] },
      "AgentItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "roles": { "type": "array", "items": { "type": "string" } }, "created_at": { "type": "string", "format": "date-time" } } },
      "TenantReq": { "type": "object", "properties": { "name": { "type": "string" } }, "required": ["name"] },
      "TenantItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "name": { "type": "string" }, "created_at": { "type": "string", "format": "date-time" } } },
      "SecretReq": { "type": "object", "properties": { "secret": { "type": "string" } }, "required": ["secret"] },
      "SecretCreateReq": { "type": "object", "properties": { "name": { "type": "string" }, "scope_type": { "type": "string" }, "scope_id": { "type": "string", "format": "uuid" }, "value": { "type": "string" } }, "required": ["name","scope_type","value"] },
      "SecretUpdateReq": { "type": "object", "properties": { "value": { "type": "string" } }, "required": ["value"] },
      "SecretListItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "name": { "type": "string" }, "scope_type": { "type": "string" }, "scope_id": { "type": "string", "format": "uuid" }, "created_at": { "type": "string", "format": "date-time" } } },
      "SecretDecryptReq": { "type": "object", "properties": { "reason": { "type": "string" } } },
      "SecretValue": { "type": "object", "properties": { "value": { "type": "string" } } },
      "DlqItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "agent_id": { "type": "string", "format": "uuid" }, "url": { "type": "string" }, "payload": { }, "last_error": { "type": "string" }, "created_at": { "type": "string", "format": "date-time" } } },
      "AclGrantAgent": { "type": "object", "properties": { "breadcrumb_id": { "type": "string", "format": "uuid" }, "grantee_agent_id": { "type": "string", "format": "uuid" }, "action": { "type": "string" } }, "required": ["breadcrumb_id","grantee_agent_id","action"] },
      "AclItem": { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "breadcrumb_id": { "type": "string", "format": "uuid" }, "grantee_agent_id": { "type": "string", "format": "uuid" }, "actions": { "type": "array", "items": { "type": "string" } }, "created_at": { "type": "string", "format": "date-time" } } },
      "RowsResp": { "type": "object", "properties": { "rows": { "type": "integer" } } },
      "AgentRunInput": { "type": "object", "properties": { "model": { "type": "string" }, "messages": { }, "referer": { "type": "string" }, "site_title": { "type": "string" } }, "required": ["model","messages"] },
      "AgentRunOutput": { "type": "object", "properties": { "agent1_plan": { "type": "string" }, "agent2_execution": { "type": "string" }, "agent3_summary": { "type": "string" }, "final_answer": { "type": "string" } } },
      "TokenRequest": { "type": "object", "properties": { "owner_id": { "type": "string", "format": "uuid" }, "agent_id": { "type": "string", "format": "uuid" }, "roles": { "type": "array", "items": { "type": "string" } }, "ttl_sec": { "type": "integer", "description": "Token TTL in seconds", "default": 3600 } }, "required": ["owner_id", "agent_id"] },
      "TokenResponse": { "type": "object", "properties": { "token": { "type": "string" }, "owner_id": { "type": "string", "format": "uuid" }, "agent_id": { "type": "string", "format": "uuid" }, "roles": { "type": "array", "items": { "type": "string" } }, "exp": { "type": "integer", "description": "Expiration timestamp" } } },
      "HygieneStats": { "type": "object", "properties": { "runs_completed": { "type": "integer" }, "total_breadcrumbs_purged": { "type": "integer" }, "total_agents_cleaned": { "type": "integer" }, "last_run_duration_ms": { "type": "integer" }, "last_run_errors": { "type": "array", "items": { "type": "string" } }, "hygiene_enabled": { "type": "boolean" }, "last_updated": { "type": "string", "format": "date-time" } } },
      "HygieneRunResult": { "type": "object", "properties": { "triggered": { "type": "boolean" }, "health_checks_purged": { "type": "integer" }, "expired_breadcrumbs_purged": { "type": "integer" }, "total_cleaned": { "type": "integer" }, "message": { "type": "string" } } }
    },
    "securitySchemes": {
      "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  },
  "security": [{ "bearerAuth": [] }]
}


