{
  "schema_name": "tool.code.v1",
  "title": "Random Number Generator (Self-Contained)",
  "tags": ["tool", "tool:random", "workspace:tools", "self-contained"],
  "context": {
    "name": "random",
    "description": "Generate random numbers",
    "version": "2.0.0",
    "code": {
      "language": "typescript",
      "source": "/**\n * Random Number Generator - Self-Contained Deno Version\n * Generates random numbers within specified range\n */\n\ninterface Input {\n  min?: number;\n  max?: number;\n  count?: number;\n}\n\ninterface Output {\n  numbers: number[];\n}\n\ninterface Context {\n  secrets: Record<string, string>;\n  api: any;\n  request: any;\n}\n\nexport async function execute(input: Input, context: Context): Promise<Output> {\n  const min = input.min !== undefined ? input.min : 0;\n  const max = input.max !== undefined ? input.max : 100;\n  const count = input.count !== undefined ? input.count : 1;\n  \n  // Validate inputs\n  if (typeof min !== 'number' || typeof max !== 'number' || typeof count !== 'number') {\n    throw new Error('min, max, and count must all be numbers');\n  }\n  \n  if (count < 1 || count > 10) {\n    throw new Error('count must be between 1 and 10');\n  }\n  \n  if (min > max) {\n    throw new Error('min must be less than or equal to max');\n  }\n  \n  // Generate random numbers\n  const numbers = Array.from({ length: count }, () => \n    Math.floor(Math.random() * (max - min + 1)) + min\n  );\n  \n  return {\n    numbers\n  };\n}\n"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "min": {
          "type": "number",
          "description": "Minimum value",
          "default": 0
        },
        "max": {
          "type": "number",
          "description": "Maximum value",
          "default": 100
        },
        "count": {
          "type": "number",
          "description": "How many numbers",
          "default": 1,
          "minimum": 1,
          "maximum": 10
        }
      }
    },
    "output_schema": {
      "type": "object",
      "properties": {
        "numbers": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "Array of generated random numbers"
        }
      }
    },
    "permissions": {
      "net": false,
      "read": false,
      "write": false,
      "env": false,
      "run": false,
      "ffi": false,
      "hrtime": false
    },
    "limits": {
      "timeout_ms": 1000,
      "memory_mb": 16,
      "cpu_percent": 10
    },
    "required_secrets": [],
    "ui_schema": {
      "configurable": false
    },
    "examples": [
      {
        "description": "Single random number",
        "input": {
          "min": 1,
          "max": 10
        },
        "output": {
          "numbers": [7]
        },
        "explanation": "Access the number with result.numbers[0]"
      },
      {
        "description": "Multiple random numbers",
        "input": {
          "min": 0,
          "max": 100,
          "count": 3
        },
        "output": {
          "numbers": [42, 73, 15]
        },
        "explanation": "Access with result.numbers[0], result.numbers[1], etc."
      },
      {
        "description": "For use in workflows",
        "input": {
          "min": 1,
          "max": 100
        },
        "output": {
          "numbers": [84]
        },
        "explanation": "In workflow steps, use ${stepId.numbers[0]}"
      }
    ]
  }
}

